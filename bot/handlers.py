# bot/handlers.py
from aiogram import Router, F, Bot
from aiogram.types import Message, FSInputFile # –î–æ–±–∞–≤–ª—è–µ–º FSInputFile –æ–±—Ä–∞—Ç–Ω–æ
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ò–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
import sys
import os
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_root not in sys.path: sys.path.insert(0, project_root)

try:
    from utils.find_tokens import find_and_filter_symbols, OUTPUT_CSV_FILE as ALL_SYMBOLS_CSV # CSV —Å–æ –≤—Å–µ–º–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
    from utils.chart_screenshot import take_mexc_chart_screenshot, SCREENSHOT_DIR
    from main import run_one_scan_cycle # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞–Ω–µ—Ä–∞
except ImportError as e: print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ bot/handlers.py: {e}"); exit(1)

from .keyboards import get_main_keyboard
import csv
from datetime import datetime, timezone
import pathlib
import traceback
import tempfile # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö CSV —Ñ–∞–π–ª–æ–≤

# –°–æ–∑–¥–∞–µ–º Router
router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ---
class ScreenshotState(StatesGroup): waiting_for_symbol = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV ---
def create_temp_csv(data: list, base_filename: str) -> str | None:
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É."""
    if not data: return None
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(mode='w', suffix=".csv", delete=False, encoding='utf-8', newline='')
        filename = temp_file.name
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ CSV: {filename}")

        fieldnames = list(data[0].keys())
        writer = csv.DictWriter(temp_file, fieldnames=fieldnames, extrasaction='ignore')
        writer.writeheader()
        writer.writerows(data)
        temp_file.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª, —á—Ç–æ–±—ã –æ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ CSV {base_filename}: {e}")
        if 'temp_file' in locals() and not temp_file.closed: temp_file.close()
        return None
# ----------------------------------------------------

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.message(CommandStart())
async def handle_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–∫—Ä–∏–Ω–µ—Ä MEXC...", reply_markup=get_main_keyboard())

# --- –ò–ó–ú–ï–ù–ï–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö ---
@router.message(F.text == "üîé –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ") # <-- –ù–æ–≤–∞—è/—Å—Ç–∞—Ä–∞—è –Ω–∞–¥–ø–∏—Å—å
async def handle_scan_request(message: Message, bot: Bot):
    user_id = message.from_user.id
    print(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ó–ê–ü–£–°–ö –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ü–µ–Ω–µ...")

    try:
        # 1. –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª—ã –ø–æ —Ü–µ–Ω–µ
        filtered_symbols_data = await find_and_filter_symbols()
        if not filtered_symbols_data:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        symbols_to_scan = [item['symbol'] for item in filtered_symbols_data]
        await message.answer(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(symbols_to_scan)} —Ç–æ–∫–µ–Ω–æ–≤. –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (1 —Ü–∏–∫–ª)...")

        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –û–î–ò–ù —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        brush_results, ladder_results = await run_one_scan_cycle(symbols_to_scan)

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        found_symbols = set()
        if brush_results: found_symbols.update([item['symbol'] for item in brush_results])
        if ladder_results: found_symbols.update([item['symbol'] for item in ladder_results])

        report_files = [] # –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ CSV —Ñ–∞–π–ª–∞–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        if found_symbols:
            sorted_symbols = sorted(list(found_symbols))
            response_text = f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n–ü–∞—Ç—Ç–µ—Ä–Ω—ã ('–Å—Ä—à–∏–∫' –∏–ª–∏ '–õ–µ—Å–µ–Ω–∫–∞') –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö:\n\n"
            response_text += "\n".join(f"- {s}" for s in sorted_symbols)

            # –°–æ–∑–¥–∞–µ–º CSV –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if brush_results:
                 brush_csv_path = create_temp_csv(brush_results, "brush_scan")
                 if brush_csv_path: report_files.append(("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã '–Å—Ä—à–∏–∫'", brush_csv_path))
            if ladder_results:
                 ladder_csv_path = create_temp_csv(ladder_results, "ladder_scan")
                 if ladder_csv_path: report_files.append(("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã '–õ–µ—Å–µ–Ω–∫–∞'", ladder_csv_path))

        else:
            response_text = "‚ÑπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ '–Å—Ä—à–∏–∫' –∏–ª–∏ '–õ–µ—Å–µ–Ω–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ."

        await message.answer(response_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–∑–¥–∞–ª–∏—Å—å
        for caption, filepath in report_files:
            try:
                 csv_doc = FSInputFile(filepath)
                 await message.answer_document(csv_doc, caption=caption)
                 # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                 try: os.remove(filepath)
                 except OSError as e_del: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filepath}: {e_del}")
            except Exception as e_send:
                 print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {filepath}: {e_send}")
                 await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {caption}.csv")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        traceback.print_exc()

# -----------------------------

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.message(F.text == "üì∏ –ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
async def handle_screenshot_request(message: Message, state: FSMContext):
   # ...(–∫–æ–¥)
   pass # –ö–∞–∫ –≤ –ø—Ä–µ–¥. —à–∞–≥–µ

@router.message(StateFilter(ScreenshotState.waiting_for_symbol))
async def handle_symbol_for_screenshot(message: Message, state: FSMContext, bot: Bot):
   # ...(–∫–æ–¥)
   pass # –ö–∞–∫ –≤ –ø—Ä–µ–¥. —à–∞–≥–µ


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.message(F.text)
async def handle_unknown_text(message: Message):
   # ...(–∫–æ–¥)
    pass # –ö–∞–∫ –≤ –ø—Ä–µ–¥. —à–∞–≥–µ