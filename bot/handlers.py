import asyncio
from aiogram import Router, F, Bot
from aiogram.types import Message, FSInputFile # –î–æ–±–∞–≤–ª—è–µ–º FSInputFile –æ–±—Ä–∞—Ç–Ω–æ
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ò–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
import sys, os, csv, datetime, pathlib, traceback, tempfile
from datetime import timezone, timedelta # –£—Ç–æ—á–Ω–∏–º –∏–º–ø–æ—Ä—Ç timedelta

project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_root not in sys.path: sys.path.insert(0, project_root)

try:
    from utils.find_tokens import find_and_filter_symbols, OUTPUT_CSV_FILE as ALL_SYMBOLS_CSV # CSV —Å–æ –≤—Å–µ–º–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
    from utils.chart_generator import generate_mexc_chart_image, CHART_TIMEFRAME as GENERATED_CHART_TIMEFRAME # –ë–µ—Ä–µ–º –¢–§ –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    from main import run_one_scan_cycle # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞–Ω–µ—Ä–∞
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ bot/handlers.py: {e}"); exit(1)

from .keyboards import get_main_keyboard

# –°–æ–∑–¥–∞–µ–º Router
router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ---
class ScreenshotState(StatesGroup):
    waiting_for_symbol = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV ---
def create_temp_csv(data: list, base_filename: str) -> str | None:
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É."""
    if not data:
        return None
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(mode='w', suffix=".csv", delete=False, encoding='utf-8', newline='')
        filename = temp_file.name
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ CSV: {filename}")

        fieldnames = list(data[0].keys())
        writer = csv.DictWriter(temp_file, fieldnames=fieldnames, extrasaction='ignore')
        writer.writeheader()
        writer.writerows(data)
        temp_file.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª, —á—Ç–æ–±—ã –æ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ CSV {base_filename}: {e}")
        if 'temp_file' in locals() and not temp_file.closed: temp_file.close()
        return None
# ----------------------------------------------------

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.message(CommandStart())
async def handle_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–∫—Ä–∏–Ω–µ—Ä MEXC...", reply_markup=get_main_keyboard())

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" ---
@router.message(F.text == "üîé –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def handle_scan_request(message: Message, bot: Bot):
    user_id = message.from_user.id
    print(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ó–ê–ü–£–°–ö –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    processing_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤...")

    try:
        # 1. –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª—ã –ø–æ —Ü–µ–Ω–µ
        filtered_symbols_data = await find_and_filter_symbols()
        if not filtered_symbols_data:
            await bot.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ.", chat_id=message.chat.id, message_id=processing_message.message_id)
            return

        symbols_to_scan = [item['symbol'] for item in filtered_symbols_data]
        await bot.edit_message_text(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(symbols_to_scan)} —Ç–æ–∫. –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...", chat_id=message.chat.id, message_id=processing_message.message_id)

        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –û–î–ò–ù —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        brush_results, ladder_results = await run_one_scan_cycle(symbols_to_scan)

        # 3. –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        found_symbols_details = {} # –°–ª–æ–≤–∞—Ä—å: {'SYMBOL': '–¢–∏–ø –ü–∞—Ç—Ç–µ—Ä–Ω–∞'}
        if brush_results:
            for item in brush_results: found_symbols_details[item['symbol']] = "–Å—Ä—à–∏–∫"
        if ladder_results:
            for item in ladder_results: found_symbols_details[item['symbol']] = "–õ–µ—Å–µ–Ω–∫–∞" # –õ–µ—Å–µ–Ω–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –Å—Ä—à–∏–∫, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º/–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        if found_symbols_details:
            sorted_symbols = sorted(list(found_symbols_details.keys()))
            await bot.edit_message_text(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(sorted_symbols)}. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏...", chat_id=message.chat.id, message_id=processing_message.message_id)

            sent_count = 0
            for symbol in sorted_symbols:
                pattern_type = found_symbols_details[symbol]
                print(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol} ({pattern_type})...")
                filepath = await generate_mexc_chart_image(symbol) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª —Å '/'
                if filepath and os.path.exists(filepath):
                    try:
                        chart_image = FSInputFile(filepath)
                        await message.answer_photo(chart_image, caption=f"{symbol} - –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern_type} (–¢–§: {GENERATED_CHART_TIMEFRAME})")
                        sent_count += 1
                    except Exception as e_send:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ {filepath}: {e_send}")
                        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {symbol}")
                    finally:
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω)
                        try: os.remove(filepath)
                        except OSError as e_del: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {filepath}: {e_del}")
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {symbol}")
                    await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {symbol}")
                await asyncio.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –ª–∏–º–∏—Ç—ã

            final_message = f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(sorted_symbols)} –≥—Ä–∞—Ñ–∏–∫–æ–≤."
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏..."
            try: await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
            except: pass
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(final_message, reply_markup=get_main_keyboard())

        else:
            await bot.edit_message_text("‚ÑπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", chat_id=message.chat.id, message_id=processing_message.message_id)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥.", reply_markup=get_main_keyboard())


        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ CSV (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û) ---
        # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤, –Ω–æ –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # if brush_results:
        #     create_temp_csv(brush_results, BRUSH_PATTERN_LOG_CSV) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
        # if ladder_results:
        #     create_temp_csv(ladder_results, LADDER_PATTERN_LOG_CSV)
        # --------------------------------------------

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: {e}")
        try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
             await bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.", chat_id=message.chat.id, message_id=processing_message.message_id)
        except: # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        traceback.print_exc()


# -----------------------------

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.message(F.text == "üìà –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫")
async def handle_screenshot_request(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT):")
    await state.set_state(ScreenshotState.waiting_for_symbol)

@router.message(StateFilter(ScreenshotState.waiting_for_symbol))
async def handle_symbol_for_screenshot(message: Message, state: FSMContext, bot: Bot):
    symbol = message.text.strip().upper()
    user_id = message.from_user.id
    print(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–º–≤–æ–ª '{symbol}' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ì–†–ê–§–ò–ö–ê –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if '/' not in symbol or len(symbol.split('/')) != 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 'BASE/QUOTE':")
        return

    await state.clear()
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    processing_message = await message.answer(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {symbol}...")

    try:
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        filepath = await generate_mexc_chart_image(symbol)

        if filepath and os.path.exists(filepath):
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ {filepath} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            chart_image = FSInputFile(filepath)
            await message.answer_photo(chart_image, caption=f"–ì—Ä–∞—Ñ–∏–∫ {symbol} ({GENERATED_CHART_TIMEFRAME})")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try: os.remove(filepath)
            except OSError as e_del: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {filepath}: {e_del}")
        else:
            print(f"–§—É–Ω–∫—Ü–∏—è generate_mexc_chart_image –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Ç—å –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {symbol}.")
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {symbol}.")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫..."
        await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ generate_mexc_chart_image –¥–ª—è {symbol}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}.")
        if processing_message: # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –µ—Å—Ç—å
             try: await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
             except: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        traceback.print_exc()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.message(F.text)
async def handle_unknown_text(message: Message):
   await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=get_main_keyboard())