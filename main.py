# main.py
import asyncio
import ccxt.async_support as ccxt_async
import ccxt
import time
from datetime import datetime, timezone
import traceback
import csv
import os

# –ò–º–ø–æ—Ä—Ç—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
from detectors.brush_detector import check_brush_pattern, BRUSH_LOOKBACK_CANDLES
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ª–µ—Å–µ–Ω–∫–∏
from detectors.ladder_detector import check_ladder_pattern, LADDER_LOOKBACK_CANDLES

# –ò–º–ø–æ—Ä—Ç –ø–æ–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
from utils.find_tokens import find_and_filter_symbols # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –≤–µ—Ä–Ω–æ–µ

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
CHECK_INTERVAL_SECONDS = 60
CANDLE_TIMEFRAME = '1m'
PRINT_COOLDOWN_SECONDS = 300
BRUSH_PATTERN_LOG_CSV = 'brush_patterns_log.csv'
LADDER_PATTERN_LOG_CSV = 'ladder_patterns_log.csv'
LOG_COOLDOWN_SECONDS = 60 * 10 # –ö—É–ª–¥–∞—É–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ (10 –º–∏–Ω—É—Ç)
# -----------------

# –ü–µ—Ä–µ—Å—á–µ—Ç CANDLES_TO_FETCH
try:
    # –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –æ–±–æ–∏—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ + –∑–∞–ø–∞—Å
    CANDLES_TO_FETCH = max(BRUSH_LOOKBACK_CANDLES, LADDER_LOOKBACK_CANDLES + 1) + 50 # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: +1 –¥–ª—è –ª–µ—Å–µ–Ω–∫–∏
except NameError:
    print("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è FETCH.")
    BRUSH_LOOKBACK_CANDLES = 120
    LADDER_LOOKBACK_CANDLES = 60
    CANDLES_TO_FETCH = max(BRUSH_LOOKBACK_CANDLES, LADDER_LOOKBACK_CANDLES + 1) + 50 # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: +1 –¥–ª—è –ª–µ—Å–µ–Ω–∫–∏

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∫—É–ª–¥–∞—É–Ω–æ–≤
last_brush_log_times = {}
last_ladder_log_times = {}
last_pattern_print_times = {}

# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ ---
async def check_exchange_timeframes(exchange):
    try:
        if not getattr(exchange, 'markets', None): await exchange.load_markets()
        if exchange.has['fetchOHLCV']:
            print("\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–µ–π MEXC —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (–ø–æ –¥–∞–Ω–Ω—ã–º ccxt):")
            tf = getattr(exchange, 'timeframes', None)
            if tf: print(list(tf.keys()))
            else: print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –æ—Ç ccxt.")
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {CANDLE_TIMEFRAME}")
            if tf and CANDLE_TIMEFRAME not in tf:
                print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º '{CANDLE_TIMEFRAME}' –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è!")
        else: print("–ë–∏—Ä–∂–∞ MEXC (–ø–æ –¥–∞–Ω–Ω—ã–º ccxt) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç fetchOHLCV."); return False
        return True
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {e}"); return False

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV ---
async def fetch_ohlcv_safe(exchange: ccxt_async.Exchange, symbol: str, timeframe: str, limit: int):
    try:
        ohlcv = await exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        if not ohlcv: return symbol, None
        if all(len(candle) >= 5 for candle in ohlcv): return symbol, ohlcv
        else:
             valid_ohlcv = [candle for candle in ohlcv if len(candle) >= 5]
             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ú–ò–ù–ò–ú–ê–õ–¨–ù–û –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
             required_min_len = max(BRUSH_LOOKBACK_CANDLES, LADDER_LOOKBACK_CANDLES + 1) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: +1
             if len(valid_ohlcv) >= required_min_len:
                 return symbol, valid_ohlcv
             else:
                 # print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π ({len(valid_ohlcv)}/{required_min_len}) –¥–ª—è {symbol}.")
                 return symbol, None
    except ccxt.BadRequest as e:
        error_key = f"{symbol}_{timeframe}_invalid_interval"
        if error_key not in fetch_ohlcv_safe.reported_errors:
             print(f"–û—à–∏–±–∫–∞ BadRequest ('Invalid interval'?) –¥–ª—è {symbol} [{timeframe}]: {e}. –ü—Ä–æ–ø—É—Å–∫.")
             fetch_ohlcv_safe.reported_errors.add(error_key)
    except ccxt.RateLimitExceeded as e: print(f"RateLimit –¥–ª—è {symbol}: {e}. –ü–∞—É–∑–∞..."); await asyncio.sleep(10)
    except ccxt.NetworkError as e: print(f"NetworkError –¥–ª—è {symbol}: {e}.")
    except ccxt.ExchangeError as e: print(f"ExchangeError –¥–ª—è {symbol}: {e}.")
    except Exception as e: print(f"Unknown Error –¥–ª—è {symbol}: {e}"); # traceback.print_exc()
    return symbol, None
fetch_ohlcv_safe.reported_errors = set()

# --- –§—É–Ω–∫—Ü–∏—è –¥–æ–∑–∞–ø–∏—Å–∏ –≤ CSV ---
def append_patterns_to_csv(patterns_data: list, filename: str):
    if not patterns_data: return
    file_exists = os.path.isfile(filename)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ —Å–ª–æ–≤–∞—Ä–∏ –≤ —Å–ø–∏—Å–∫–µ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–π
    if len(patterns_data) > 1:
        first_keys = set(patterns_data[0].keys())
        if not all(set(d.keys()) == first_keys for d in patterns_data[1:]):
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è {filename} –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–ª—é—á–∏. –ó–∞–ø–∏—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π.")
            # –ú–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –æ–±—â–∏–π –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–π –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
    fieldnames = list(patterns_data[0].keys()) # –ë–µ—Ä–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏

    try:
        with open(filename, 'a', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames, extrasaction='ignore') # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
            if not file_exists or os.path.getsize(filename) == 0:
                writer.writeheader()
            writer.writerows(patterns_data)
    except IOError as e: print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ CSV —Ñ–∞–π–ª {filename}: {e}")
    except Exception as e: print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–∑–∞–ø–∏—Å–∏ –≤ CSV {filename}: {e}"); traceback.print_exc()

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ---
async def periodic_pattern_check(symbols: list):
    if not symbols: print("–ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."); return

    exchange = ccxt_async.mexc({'options': {'defaultType': 'spot'}})
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ OHLCV –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤...")
    if not await check_exchange_timeframes(exchange):
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OHLCV/—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.")
        await exchange.close(); return

    print(f"\n[{datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}] –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É ({CHECK_INTERVAL_SECONDS} —Å–µ–∫) –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
    try:
        while True:
            start_time_cycle = time.time()
            print(f"[{datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}] –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            fetch_ohlcv_safe.reported_errors.clear()

            tasks = [fetch_ohlcv_safe(exchange, symbol, CANDLE_TIMEFRAME, CANDLES_TO_FETCH) for symbol in symbols]
            # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è gather, –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤
            results = await asyncio.gather(*tasks, return_exceptions=True)


            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {len(results)} —Å–∏–º–≤–æ–ª–æ–≤...")
            brush_patterns_to_log = []
            ladder_patterns_to_log = []
            patterns_found_this_cycle = 0
            current_check_time = time.time()

            for result in results:
                if isinstance(result, Exception): continue

                symbol, ohlcv_list = result
                if ohlcv_list is None: continue

                detection_time_utc = datetime.now(timezone.utc)

                # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Å—Ä—à–∏–∫ ---
                try:
                    if len(ohlcv_list) >= BRUSH_LOOKBACK_CANDLES: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–¥–µ—Å—å
                        is_brush, brush_details = check_brush_pattern(ohlcv_list)
                        if is_brush:
                            patterns_found_this_cycle +=1
                            if current_check_time - last_pattern_print_times.get(symbol+"_brush", 0) > PRINT_COOLDOWN_SECONDS:
                                print("-" * 25); print(f"üî• –Å–†–®–ò–ö –û–ë–ù–ê–†–£–ñ–ï–ù! [{symbol}]üî•");
                                print(f"–î–µ—Ç–∞–ª–∏: {brush_details}"); print(f"–í—Ä–µ–º—è: {detection_time_utc.strftime('%Y-%m-%d %H:%M:%S')}"); print("-" * 25)
                                last_pattern_print_times[symbol+"_brush"] = current_check_time
                            if current_check_time - last_brush_log_times.get(symbol, 0) > LOG_COOLDOWN_SECONDS:
                                log_entry = {'timestamp_utc': detection_time_utc.strftime('%Y-%m-%d %H:%M:%S'), 'symbol': symbol, **brush_details}
                                brush_patterns_to_log.append(log_entry)
                                last_brush_log_times[symbol] = current_check_time
                except Exception as e_brush: print(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ Brush –¥–ª—è {symbol}: {e_brush}"); traceback.print_exc()

                # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –õ–µ—Å–µ–Ω–∫—É ---
                try:
                    req_len_ladder = LADDER_LOOKBACK_CANDLES + 1 # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                    if len(ohlcv_list) >= req_len_ladder: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–¥–µ—Å—å
                        is_ladder, ladder_details = check_ladder_pattern(ohlcv_list)
                        if is_ladder:
                            patterns_found_this_cycle +=1
                            if current_check_time - last_pattern_print_times.get(symbol+"_ladder", 0) > PRINT_COOLDOWN_SECONDS:
                                print("=" * 25); print(f"ü™ú –õ–ï–°–ï–ù–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê! [{symbol}]ü™ú");
                                print(f"–î–µ—Ç–∞–ª–∏: {ladder_details}"); print(f"–í—Ä–µ–º—è: {detection_time_utc.strftime('%Y-%m-%d %H:%M:%S')}"); print("=" * 25)
                                last_pattern_print_times[symbol+"_ladder"] = current_check_time
                            if current_check_time - last_ladder_log_times.get(symbol, 0) > LOG_COOLDOWN_SECONDS:
                                log_entry = {'timestamp_utc': detection_time_utc.strftime('%Y-%m-%d %H:%M:%S'), 'symbol': symbol, **ladder_details}
                                ladder_patterns_to_log.append(log_entry)
                                last_ladder_log_times[symbol] = current_check_time
                except Exception as e_ladder: print(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ Ladder –¥–ª—è {symbol}: {e_ladder}"); traceback.print_exc()

            # --- –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ ---
            if brush_patterns_to_log: append_patterns_to_csv(brush_patterns_to_log, BRUSH_PATTERN_LOG_CSV)
            if ladder_patterns_to_log: append_patterns_to_csv(ladder_patterns_to_log, LADDER_PATTERN_LOG_CSV)

            cycle_duration = time.time() - start_time_cycle
            print(f"–¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.2f} —Å–µ–∫. –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–≤—Å–µ–≥–æ): {patterns_found_this_cycle}. –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥: –ï—Ä—à–∏–∫–∏={len(brush_patterns_to_log)}, –õ–µ—Å–µ–Ω–∫–∏={len(ladder_patterns_to_log)}")
            sleep_time = max(0, CHECK_INTERVAL_SECONDS - cycle_duration)
            if sleep_time > 0: await asyncio.sleep(sleep_time)

    finally:
        print("\n–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MEXC (OHLCV)...")
        if 'exchange' in locals() and hasattr(exchange, 'close'):
             try: await exchange.close(); print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MEXC (OHLCV) –∑–∞–∫—Ä—ã—Ç–æ.")
             except Exception as e_close: print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è OHLCV: {e_close}")

# --- –ë–ª–æ–∫ if __name__ == "__main__": ---
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–Ω–µ—Ä (—Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ OHLCV v4: Brush + Ladder)...")
    filtered_symbols_data = asyncio.run(find_and_filter_symbols())
    if filtered_symbols_data:
        symbols_to_watch = [item['symbol'] for item in filtered_symbols_data]
        print(f"\n–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(symbols_to_watch)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        if symbols_to_watch:
            print("\n–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            try: asyncio.run(periodic_pattern_check(symbols_to_watch))
            except KeyboardInterrupt: print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Ctrl+C)...")
            except Exception as e: print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ __main__: {e}"); traceback.print_exc()
        else: print("\n–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Å—Ç –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
    else: print("\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
    print("\n–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")