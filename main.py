import asyncio
# import ccxt.pro as ccxtpro # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞
import ccxt.async_support as ccxt_async # –ù—É–∂–µ–Ω –¥–ª—è fetch_ohlcv
import ccxt # –î–ª—è –æ—à–∏–±–æ–∫
import time
from datetime import datetime, timedelta, timezone
import traceback
import csv
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from detectors.brush_detector import check_brush_pattern, BRUSH_LOOKBACK_CANDLES # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
from utils.find_tokens import find_and_filter_symbols

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
CHECK_INTERVAL_SECONDS = 60
CANDLE_TIMEFRAME = '1m'
PRINT_COOLDOWN_SECONDS = 300
PATTERN_LOG_CSV = 'brush_patterns_log.csv' # <-- –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

# –ü–µ—Ä–µ—Å—á–µ—Ç CANDLES_TO_FETCH
try:
    CANDLES_TO_FETCH = BRUSH_LOOKBACK_CANDLES + 50
except NameError:
    print("–û—à–∏–±–∫–∞: BRUSH_LOOKBACK_CANDLES –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    BRUSH_LOOKBACK_CANDLES = 120
    CANDLES_TO_FETCH = BRUSH_LOOKBACK_CANDLES + 50

last_pattern_print_times = {}

async def check_exchange_timeframes(exchange):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–µ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã."""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ç.–∫. timeframes –º–æ–≥—É—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —ç—Ç–æ–≥–æ
        if not exchange.markets:
            await exchange.load_markets()

        if exchange.has['fetchOHLCV']:
            print("\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–µ–π MEXC —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (–ø–æ –¥–∞–Ω–Ω—ã–º ccxt):")
            # timeframes –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            if exchange.timeframes:
                print(list(exchange.timeframes.keys()))
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –æ—Ç ccxt (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—ã–Ω–∫–∏).")
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {CANDLE_TIMEFRAME}")
            if exchange.timeframes and CANDLE_TIMEFRAME not in exchange.timeframes:
                print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º '{CANDLE_TIMEFRAME}' –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –±–∏—Ä–∂–µ–π!")
        else:
            print("–ë–∏—Ä–∂–∞ MEXC (–ø–æ –¥–∞–Ω–Ω—ã–º ccxt) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç fetchOHLCV.")
            return False # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, –µ—Å–ª–∏ OHLCV –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {e}")
        return False # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å

async def fetch_ohlcv_safe(exchange, symbol, timeframe, limit):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç OHLCV, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫–∏."""
    try:
        # print(f"–ó–∞–ø—Ä–æ—Å {limit} {timeframe} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}...")
        ohlcv = await exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        # print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(ohlcv)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
        # –ù–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è (–∏–Ω–¥–µ–∫—Å 4 –≤ —Å–ø–∏—Å–∫–µ OHLCV)
        close_prices = [candle[4] for candle in ohlcv if len(candle) >= 5]
        return symbol, close_prices
    except ccxt.RateLimitExceeded as e:
        print(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {symbol}: {e}. –ü—Ä–æ–ø—É—Å–∫.")
        await asyncio.sleep(5) # –ü–∞—É–∑–∞ –ø—Ä–∏ –ª–∏–º–∏—Ç–µ
    except ccxt.NetworkError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ OHLCV –¥–ª—è {symbol}: {e}. –ü—Ä–æ–ø—É—Å–∫.")
    except ccxt.ExchangeError as e:
        print(f"–û—à–∏–±–∫–∞ –±–∏—Ä–∂–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ OHLCV –¥–ª—è {symbol}: {e}. –ü—Ä–æ–ø—É—Å–∫.")
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ OHLCV –¥–ª—è {symbol}: {e}")
    return symbol, None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

async def periodic_pattern_check(symbols: list):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç OHLCV –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω '–Å—Ä—à–∏–∫'.
    """
    if not symbols:
        print("–ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    exchange = ccxt_async.mexc({'options': {'defaultType': 'spot'}})
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ OHLCV –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤...")
    if not await check_exchange_timeframes(exchange):
         print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OHLCV/—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.")
         await exchange.close()
         return # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞

    print(f"\n[{datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}] –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É ({CHECK_INTERVAL_SECONDS} —Å–µ–∫) –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")

    while True:
        start_time_cycle = time.time()
        print(f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏...")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ OHLCV
        tasks = [fetch_ohlcv_safe(exchange, symbol, CANDLE_TIMEFRAME, CANDLES_TO_FETCH) for symbol in symbols]
        results = await asyncio.gather(*tasks)

        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {len(results)} —Å–∏–º–≤–æ–ª–æ–≤...")
        patterns_found_this_cycle = 0
        current_check_time = time.time()

        for symbol, close_prices in results:
            if close_prices is None or len(close_prices) < BRUSH_LOOKBACK_CANDLES:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –∏—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                # if close_prices is not None:
                #     print(f"Debug [{symbol}]: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö {len(close_prices)}/{BRUSH_LOOKBACK_CANDLES}")
                continue

            try:
                is_brush, details = check_brush_pattern(close_prices)

                if is_brush:
                    last_print_time = last_pattern_print_times.get(symbol, 0)
                    if current_check_time - last_print_time > PRINT_COOLDOWN_SECONDS:
                        print("-" * 25)
                        print(f"üî• –ü–ê–¢–¢–ï–†–ù '–Å–†–®–ò–ö' –û–ë–ù–ê–†–£–ñ–ï–ù! üî•")
                        print(f"–°–∏–º–≤–æ–ª: {symbol}")
                        print(f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {CANDLE_TIMEFRAME}")
                        print(f"–î–µ—Ç–∞–ª–∏: {details}")
                        print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {close_prices[-1]}")
                        print(f"–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                        print("-" * 25)
                        last_pattern_print_times[symbol] = current_check_time
                        patterns_found_this_cycle += 1

            except Exception as e_check:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è {symbol}: {e_check}")
                traceback.print_exc()


        cycle_duration = time.time() - start_time_cycle
        print(f"–¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.2f} —Å–µ–∫. –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {patterns_found_this_cycle}.")

        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
        sleep_time = max(0, CHECK_INTERVAL_SECONDS - cycle_duration)
        if sleep_time > 0:
            # print(f"–û–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.2f} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º...")
            await asyncio.sleep(sleep_time)

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—ç—Ç–æ—Ç –∫–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ)
    print("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MEXC...")
    await exchange.close()


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–Ω–µ—Ä (—Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ OHLCV)...")
    # 1. –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã
    filtered_symbols_data = asyncio.run(find_and_filter_symbols())

    if filtered_symbols_data:
        symbols_to_watch = [item['symbol'] for item in filtered_symbols_data]
        print(f"\n–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(symbols_to_watch)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")

        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if symbols_to_watch:
            print("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
                asyncio.run(periodic_pattern_check(symbols_to_watch))
            except KeyboardInterrupt:
                print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Ctrl+C)")
            except Exception as e:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {e}")
                traceback.print_exc()
        else:
            print("–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Å—Ç –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
    else:
        print("\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")

    print("\n–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")